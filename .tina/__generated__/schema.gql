# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  basename: String!
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  sys: SystemInfo
  id: ID!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Int!
}

type Query {
  getCollection(collection: String): Collection!
  getCollections: [Collection!]!
  node(id: String): Node!
  getDocument(collection: String, relativePath: String): DocumentNode!
  getDocumentList(before: String, after: String, first: Int, last: Int): DocumentConnection!
  getGlobalDocument(relativePath: String): GlobalDocument!
  getGlobalList(before: String, after: String, first: Int, last: Int): GlobalConnection!
  getPagesDocument(relativePath: String): PagesDocument!
  getPagesList(before: String, after: String, first: Int, last: Int): PagesConnection!
}

type DocumentConnectionEdges {
  cursor: String
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String!
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Int, last: Int): DocumentConnection!
}

union DocumentNode = GlobalDocument | PagesDocument

type GlobalRedirects {
  from: String
  to: String
}

type Global {
  gtmId: String
  redirects: [GlobalRedirects]
}

type GlobalDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Global!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type GlobalConnectionEdges {
  cursor: String
  node: GlobalDocument
}

type GlobalConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [GlobalConnectionEdges]
}

type PagesBlocksFeatureImage {
  src: String
  alt: String
}

type PagesBlocksFeatureButtons {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

type PagesBlocksFeatureStyleBackgroundImage {
  src: String
  alt: String
}

type PagesBlocksFeatureStyle {
  flipLayout: Boolean
  imageStyle: String
  textAlignment: String
  contentAlignment: String
  contentOrder: String
  backgroundColor: String
  backgroundImage: PagesBlocksFeatureStyleBackgroundImage
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

type PagesBlocksFeature {
  image: PagesBlocksFeatureImage
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksFeatureButtons]
  navigationLabel: String
  style: PagesBlocksFeatureStyle
}

type PagesBlocksPhotoCardsButtons {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

type PagesBlocksPhotoCardsItemsImage {
  src: String
  alt: String
}

type PagesBlocksPhotoCardsItems {
  image: PagesBlocksPhotoCardsItemsImage
  headline: String
  subhead: String
  text: String
  link: String
  buttonLabel: String
}

type PagesBlocksPhotoCardsStyleBackgroundImage {
  src: String
  alt: String
}

type PagesBlocksPhotoCardsStyle {
  columns: String
  textAlignment: String
  contentOrder: String
  backgroundColor: String
  backgroundImage: PagesBlocksPhotoCardsStyleBackgroundImage
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

type PagesBlocksPhotoCardsCardStyle {
  type: String
  backgroundColor: String
  accentColor: String
  buttonType: String
  buttonTextColor: String
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

type PagesBlocksPhotoCards {
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksPhotoCardsButtons]
  items: [PagesBlocksPhotoCardsItems]
  navigationLabel: String
  style: PagesBlocksPhotoCardsStyle
  cardStyle: PagesBlocksPhotoCardsCardStyle
}

type PagesBlocksTextCardsButtons {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

type PagesBlocksTextCardsItems {
  headline: String
  subhead: String
  text: String
  link: String
  buttonLabel: String
  accentColor: String
}

type PagesBlocksTextCardsStyleBackgroundImage {
  src: String
  alt: String
}

type PagesBlocksTextCardsStyle {
  columns: String
  textAlignment: String
  contentOrder: String
  backgroundColor: String
  backgroundImage: PagesBlocksTextCardsStyleBackgroundImage
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

type PagesBlocksTextCardsCardStyle {
  type: String
  backgroundColor: String
  accentColor: String
  buttonType: String
  buttonTextColor: String
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

type PagesBlocksTextCards {
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksTextCardsButtons]
  items: [PagesBlocksTextCardsItems]
  navigationLabel: String
  style: PagesBlocksTextCardsStyle
  cardStyle: PagesBlocksTextCardsCardStyle
}

type PagesBlocksBannerImage {
  src: String
  alt: String
}

type PagesBlocksBannerButtons {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

type PagesBlocksBannerStyleBackgroundImage {
  src: String
  alt: String
}

type PagesBlocksBannerStyle {
  textAlignment: String
  contentOrder: String
  width: String
  backgroundColor: String
  backgroundImage: PagesBlocksBannerStyleBackgroundImage
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

type PagesBlocksBanner {
  image: PagesBlocksBannerImage
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksBannerButtons]
  navigationLabel: String
  style: PagesBlocksBannerStyle
}

union PagesBlocks = PagesBlocksFeature | PagesBlocksPhotoCards | PagesBlocksTextCards | PagesBlocksBanner

type PagesMeta {
  siteTitle: String
  siteDescription: String
  siteImageSrc: String
}

type PagesNavNavItems {
  label: String
  link: String
}

type PagesNav {
  navItems: [PagesNavNavItems]
  navTextColor: String
  navBackgroundColor: String
}

type PagesColors {
  primary: String
  accent1: String
  accent2: String
  accent3: String
}

type Pages {
  draft: Boolean
  blocks: [PagesBlocks]
  meta: PagesMeta
  nav: PagesNav
  colors: PagesColors
}

type PagesDocument implements Node & Document {
  id: ID!
  sys: SystemInfo!
  data: Pages!
  form: JSON!
  values: JSON!
  dataJSON: JSON!
}

type PagesConnectionEdges {
  cursor: String
  node: PagesDocument
}

type PagesConnection implements Connection {
  pageInfo: PageInfo
  totalCount: Int!
  edges: [PagesConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String!, relativePath: String!, params: DocumentMutation!): DocumentNode!
  updateGlobalDocument(relativePath: String!, params: GlobalMutation!): GlobalDocument!
  updatePagesDocument(relativePath: String!, params: PagesMutation!): PagesDocument!
}

input DocumentMutation {
  global: GlobalMutation
  pages: PagesMutation
}

input GlobalRedirectsMutation {
  from: String
  to: String
}

input GlobalMutation {
  gtmId: String
  redirects: [GlobalRedirectsMutation]
}

input PagesBlocksFeatureImageMutation {
  src: String
  alt: String
}

input PagesBlocksFeatureButtonsMutation {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

input PagesBlocksFeatureStyleBackgroundImageMutation {
  src: String
  alt: String
}

input PagesBlocksFeatureStyleMutation {
  flipLayout: Boolean
  imageStyle: String
  textAlignment: String
  contentAlignment: String
  contentOrder: String
  backgroundColor: String
  backgroundImage: PagesBlocksFeatureStyleBackgroundImageMutation
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

input PagesBlocksFeatureMutation {
  image: PagesBlocksFeatureImageMutation
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksFeatureButtonsMutation]
  navigationLabel: String
  style: PagesBlocksFeatureStyleMutation
}

input PagesBlocksPhotoCardsButtonsMutation {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

input PagesBlocksPhotoCardsItemsImageMutation {
  src: String
  alt: String
}

input PagesBlocksPhotoCardsItemsMutation {
  image: PagesBlocksPhotoCardsItemsImageMutation
  headline: String
  subhead: String
  text: String
  link: String
  buttonLabel: String
}

input PagesBlocksPhotoCardsStyleBackgroundImageMutation {
  src: String
  alt: String
}

input PagesBlocksPhotoCardsStyleMutation {
  columns: String
  textAlignment: String
  contentOrder: String
  backgroundColor: String
  backgroundImage: PagesBlocksPhotoCardsStyleBackgroundImageMutation
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

input PagesBlocksPhotoCardsCardStyleMutation {
  type: String
  backgroundColor: String
  accentColor: String
  buttonType: String
  buttonTextColor: String
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

input PagesBlocksPhotoCardsMutation {
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksPhotoCardsButtonsMutation]
  items: [PagesBlocksPhotoCardsItemsMutation]
  navigationLabel: String
  style: PagesBlocksPhotoCardsStyleMutation
  cardStyle: PagesBlocksPhotoCardsCardStyleMutation
}

input PagesBlocksTextCardsButtonsMutation {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

input PagesBlocksTextCardsItemsMutation {
  headline: String
  subhead: String
  text: String
  link: String
  buttonLabel: String
  accentColor: String
}

input PagesBlocksTextCardsStyleBackgroundImageMutation {
  src: String
  alt: String
}

input PagesBlocksTextCardsStyleMutation {
  columns: String
  textAlignment: String
  contentOrder: String
  backgroundColor: String
  backgroundImage: PagesBlocksTextCardsStyleBackgroundImageMutation
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

input PagesBlocksTextCardsCardStyleMutation {
  type: String
  backgroundColor: String
  accentColor: String
  buttonType: String
  buttonTextColor: String
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

input PagesBlocksTextCardsMutation {
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksTextCardsButtonsMutation]
  items: [PagesBlocksTextCardsItemsMutation]
  navigationLabel: String
  style: PagesBlocksTextCardsStyleMutation
  cardStyle: PagesBlocksTextCardsCardStyleMutation
}

input PagesBlocksBannerImageMutation {
  src: String
  alt: String
}

input PagesBlocksBannerButtonsMutation {
  label: String
  link: String
  type: String
  textColor: String
  backgroundColor: String
}

input PagesBlocksBannerStyleBackgroundImageMutation {
  src: String
  alt: String
}

input PagesBlocksBannerStyleMutation {
  textAlignment: String
  contentOrder: String
  width: String
  backgroundColor: String
  backgroundImage: PagesBlocksBannerStyleBackgroundImageMutation
  headlineColor: String
  headlineSize: String
  subheadColor: String
  subheadSize: String
  textColor: String
  textSize: String
}

input PagesBlocksBannerMutation {
  image: PagesBlocksBannerImageMutation
  label: String
  headline: String
  subhead: String
  body: String
  buttons: [PagesBlocksBannerButtonsMutation]
  navigationLabel: String
  style: PagesBlocksBannerStyleMutation
}

input PagesBlocksMutation {
  feature: PagesBlocksFeatureMutation
  photoCards: PagesBlocksPhotoCardsMutation
  textCards: PagesBlocksTextCardsMutation
  banner: PagesBlocksBannerMutation
}

input PagesMetaMutation {
  siteTitle: String
  siteDescription: String
  siteImageSrc: String
}

input PagesNavNavItemsMutation {
  label: String
  link: String
}

input PagesNavMutation {
  navItems: [PagesNavNavItemsMutation]
  navTextColor: String
  navBackgroundColor: String
}

input PagesColorsMutation {
  primary: String
  accent1: String
  accent2: String
  accent3: String
}

input PagesMutation {
  draft: Boolean
  blocks: [PagesBlocksMutation]
  meta: PagesMetaMutation
  nav: PagesNavMutation
  colors: PagesColorsMutation
}

schema {
  query: Query
  mutation: Mutation
}
  